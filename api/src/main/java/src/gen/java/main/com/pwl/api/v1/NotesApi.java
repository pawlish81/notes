/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pwl.api.v1;

import com.pwl.api.v1.model.Note;
import com.pwl.api.v1.model.NoteList;
import com.pwl.api.v1.model.UpdatedNote;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "notes", description = "the notes API")
public interface NotesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /notes : Add a new note
     * Creates a new note in the store. Duplicates are allowed
     *
     * @param title Note title (required)
     * @param text Note text (required)
     * @param tag note tag (optional)
     * @return Note created (status code 201)
     *         or Bad Request (status code 400)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a new note", nickname = "addNote", notes = "Creates a new note in the store. Duplicates are allowed", response = Note.class, tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Note created", response = Note.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/notes",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Note> addNote(@NotNull @ApiParam(value = "Note title", required = true) @Valid @RequestParam(value = "title", required = true) String title,@NotNull @Size(max=400) @ApiParam(value = "Note text", required = true) @Valid @RequestParam(value = "text", required = true) String text,@ApiParam(value = "note tag", allowableValues = "BUSINESS, PERSONAL, IMPORTANT") @Valid @RequestParam(value = "tag", required = false) String tag) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /notes/{id} : Delete note
     * Delete a single note based on the id.
     *
     * @param id ID of note to delete (required)
     * @return Deleted (status code 200)
     *         or Invalid ID supplied (status code 400)
     */
    @ApiOperation(value = "Delete note", nickname = "deleteNote", notes = "Delete a single note based on the id.", tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Invalid ID supplied") })
    @RequestMapping(value = "/notes/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteNote(@ApiParam(value = "ID of note to delete",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /notes : Return notes with search criteria
     * Returns all notes from the syst
     *
     * @param page page (required)
     * @param size size (required)
     * @param id note id (optional)
     * @param title note title (optional)
     * @param tag note tag (optional)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "Return notes with search criteria", nickname = "getNotes", notes = "Returns all notes from the syst", response = NoteList.class, tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = NoteList.class) })
    @RequestMapping(value = "/notes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<NoteList> getNotes(@NotNull @ApiParam(value = "page", required = true, defaultValue = "0") @Valid @RequestParam(value = "page", required = true, defaultValue="0") Integer page,@NotNull @ApiParam(value = "size", required = true, defaultValue = "100") @Valid @RequestParam(value = "size", required = true, defaultValue="100") Integer size,@ApiParam(value = "note id") @Valid @RequestParam(value = "id", required = false) String id,@ApiParam(value = "note title") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "note tag", allowableValues = "BUSINESS, PERSONAL, IMPORTANT") @Valid @RequestParam(value = "tag", required = false) String tag) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalItems\" : 6, \"totalPage\" : 1, \"itemList\" : [ null, null ], \"currentPage\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /notes : Update an existing note
     * Update an existing note by Id
     *
     * @param updatedNote  (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Note not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing note", nickname = "updateNote", notes = "Update an existing note by Id", response = Note.class, tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Note.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Note not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/notes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Note> updateNote(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdatedNote updatedNote) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
