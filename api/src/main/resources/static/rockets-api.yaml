openapi: 3.0.1

info:
  version: 1.0.0
  title: Rockets
  description: The “rocket”,  a simple application allowing user to create rockets.
  contact:
    name: Piotr Pawliszcze
    email: p.pawliszcze@gmail.com

servers: [ {
  url: "http://localhost:8080",
  description: "The local API server"
} ]

paths:
  /rockets:
    post:
      tags:
        - Rocket
      description: Creates a new rocket in the store.
      operationId: addRocket
      summary: Add a new rocket
      requestBody:
        $ref: '#/components/requestBodies/newRocket'
        example:
          $ref: '#/components/examples/newRocket'

      responses:
        '201':
          description: Rocket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rocket'

        '400':
          $ref: '#/components/responses/InputError'

    put:
      tags:
        - Rocket
      summary: Update an existing rocket
      description: Update an existing rocket by Id
      operationId: updateRocket
      requestBody:
        $ref: '#/components/requestBodies/updateRocket'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rocket'
        '400':
          $ref: '#/components/responses/InputError'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags:
        - Rocket
      description: Returns filtered rockets
      operationId: getRockets
      summary: Return rockets with search criteria
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/page'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rocketList'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /rockets/{id}:
    get:
      tags:
        - Rocket
      description: Returns filtered rockets
      operationId: getRocketsByID
      summary: Return rockets with search criteria
      parameters:
        - $ref: '#/components/parameters/id'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rocket'
        '400':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Rocket
      description: Delete a single rocket based on the id.
      operationId: deleteRocket
      summary: Delete rocket
      parameters:
        - $ref: '#/components/parameters/id'

      responses:
        '204':
          description: The resource was deleted successfully.
        '400':
          $ref: '#/components/responses/NotFound'

  /audit:
    get:
      tags:
        - Admin
      description: Returns rocket filtered auditable meta data
      operationId: getRocketByAuditableData
      summary: Return rocket with audit search criteria
      parameters:
        - $ref: '#/components/parameters/audit'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/page'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rocketList'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:

  requestBodies:
    newRocket:
      description: A JSON object containing new rocket data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/newRocket'
          example:
              rocketType: COMMERCIAL
              name: atlas-1
              company: spacex
              base: avocado
              desc: small rocket
              buildDate: '2022-04-11T20:38:07+02'


    updateRocket:
      description: A JSON object containing updated rocket data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updateRocket'
          example:
              id: 94fc48e9-e9da-4a87-a46b-fa75e30e0008
              type: PRIVATE
              name: atlas-4
              company: spacex
              base: terra
              desc: big rocket
              buildDate: '2022-04-11T20:38:07+02'


  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/apiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/apiError'
    InputError:
      description: Input error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/apiError'

  parameters:
    id:
      name: id
      in: path
      description: ID of rocket
      required: true
      schema:
        type: string
        format: uuid
      example: 3fa85f64-5717-4562-b3fc-2c963f66afa6

    filter:
      name: filter
      in: query
      schema:
        $ref: '#/components/schemas/getRocketsFilter'
      example:
        value:

    audit:
      name: audit
      in: query
      schema:
        $ref: '#/components/schemas/auditMetaData'
      example:
        value:


    page:
      name: page
      in: query
      required: true
      description: page
      schema:
        type: integer
        default: 0

    size:
      name: size
      in: query
      required: true
      description: size
      schema:
        type: integer
        default: 100

  schemas:
    newRocket:
      allOf:
        - $ref: '#/components/schemas/rocketBody'
        - type: object

    updateRocket:
      allOf:
        - $ref: '#/components/schemas/baseId'
        - $ref: '#/components/schemas/rocketBody'
      type: object

    getRocketsFilter:
      allOf:
        - $ref: '#/components/schemas/baseId'
        - $ref: '#/components/schemas/rocketBody'
      type: object

    rocket:
      allOf:
        - $ref: '#/components/schemas/baseResponseWitAudit'
        - $ref: '#/components/schemas/rocketBody'
        - type: object
          properties:
            stats:
              type: object
              properties:
                default:
                  type: string
              additionalProperties:
                type: integer

    rocketBody:
      type: object
      properties:
        rocketType:
          $ref: "#/components/schemas/rocketType"
        name:
          type: string
        company:
          type: string
        base:
          type: string
        desc:
          type: string
        buildDate:
          type: string
          format: date-time
          example: 'yyyy-mm-dd HH:mm:ss'

    baseId:
      type: object
      properties:
        id:
          type: string
          format: uuid
        deleted:
          type: boolean

    rocketType:
      enum:
        - COMMERCIAL
        - MILLITARY
        - PRIVATE

    baseResponseWitAudit:
      discriminator:
        propertyName: rocketType
        mapping:
          rocket: "#/components/schemas/rocket"
      allOf:
        - $ref: '#/components/schemas/baseId'
        - type: "object"
          properties:
            audit:
              schema:
              $ref: '#/components/schemas/auditMetaData'

    rocketList:
      type: object
      properties:
        itemList:
          type: array
          items:
            $ref: '#/components/schemas/rocket'
        currentPage:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int64
        totalPage:
          type: integer
          format: int32

    auditMetaData:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        createdByUser:
          type: string
        modifiedByUser:
          type: string
        modifiedDate:
          type: string
          format: date-time


    # Schema for error response body
    apiError:
      type: object
      properties:
        status:
          type: integer
          format: int32
        code:
          type: string
        message:
          type: string
        path:
          type: string
        errors:
          type: array
          items:
            type: string
      required:
        - code
        - message
