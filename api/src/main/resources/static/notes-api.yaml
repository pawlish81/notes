openapi: 3.0.1

info:
  version: 1.0.0
  title: Notes
  description: The “Notes”,  a simple application allowing user to store its everyday notes.
  contact:
    name: Piotr Pawliszcze
    email: p.pawliszcze@gmail.com

servers : [ {
  url : "http://localhost:8080",
  description : "The local API server"
} ]

paths:
  /notes:
    post:
      tags:
        - Notes
      description: Creates a new note in the store.
      operationId: addNote
      summary: Add a new note
      parameters:
        - name: title
          in: query
          description: Note title
          required: true
          schema:
            type: string
        - name: tag
          in: query
          description: note tag
          required: false
          schema:
            type: string
            enum: [BUSINESS, PERSONAL,IMPORTANT]
        - name: text
          in: query
          description: Note text
          required: true
          schema:
            type: string
            maxItems: 400

      responses:
        '201':
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

        '400':
          $ref: '#/components/responses/InputError'


    put:
      tags:
        - Notes
      summary: Update an existing note
      description: Update an existing note by Id
      operationId: updateNote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedNote'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/InputError'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags:
        - Notes
      description: Returns all notes from the syst
      operationId: getNotes
      summary: Return notes with search criteria
      parameters:
        - name: id
          in: query
          description: note id
          schema:
            type: string
        - name: title
          in: query
          description: note title
          schema:
            type: string
        - name: tag
          in: query
          description: note tag
          schema:
            type: string
            enum:
              - BUSINESS
              - PERSONAL
              - IMPORTANT
        - name: page
          in: query
          required: true
          description: page
          schema:
            type: integer
            default: 0

        - name: size
          in: query
          required: true
          description: size
          schema:
            type: integer
            default: 100

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /notes/{id}:
    delete:
      tags:
        - Notes
      description: Delete a single note based on the id.
      operationId: deleteNote
      summary: Delete note
      parameters:
        - name: id
          in: path
          description: ID of note to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
        '400':
          description: Invalid ID supplied



components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InputError:
      description: Input error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    UpdatedNote:
      type: object
      properties:
        id:
          type: string
        tag:
          type: string
          enum:
            - BUSINESS
            - PERSONAL
            - IMPORTANT
        title:
          type: string
        text:
          type: string
        createDate:
          type: string
          format: date-time
          example: 'dd-mm-yyyy HH:mm:ss'

    NoteList:
      type: object
      properties:
        itemList:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        currentPage:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int64
        totalPage:
          type: integer
          format: int32

    Note:
      allOf:
        - $ref: '#/components/schemas/UpdatedNote'
        - type: object
          required:
            - title
            - text
          properties:
            stats:
              type: object
              properties:
                default:
                  type: string
              additionalProperties:
                type: integer


    # Schema for error response body
    ApiError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        path:
          type: string
        errors:
          type: array
          items:
            type: string
      required:
        - code
        - message